import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

public class App {
    public static void main(String[] args) throws Exception {
        System.out.println("=== –≠–ú–£–õ–Ø–¢–û–† –°–ë–û–†–©–ò–ö–ê –ú–£–°–û–†–ê JAVA ===");
        System.out.println("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞");
        System.out.println("=====================================\n");

        // –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        demonstrateMarkAndSweep();
        
        System.out.println("\n" + "=".repeat(60) + "\n");
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Copying GC
        demonstrateCopyingGC();
        
        System.out.println("\n" + "=".repeat(60) + "\n");
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        demonstrateObjectGenerator();
        
        System.out.println("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´!");
    }

    private static void demonstrateMarkAndSweep() {
        System.out.println("üßπ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MARK & SWEEP GC");
        System.out.println("================================");

        // –°–æ–∑–¥–∞–µ–º –∫—É—á—É —Ä–∞–∑–º–µ—Ä–æ–º 1000 –±–∞–π—Ç
        Heap heap = new Heap(1000);
        MarkAndSweepGC gc = new MarkAndSweepGC(heap);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        GCObject user1 = new GCObject("User_1", 100);
        GCObject user2 = new GCObject("User_2", 150);
        GCObject cache = new GCObject("Cache", 200);
        GCObject temp = new GCObject("Temp", 50);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∫—É—á—É
        heap.addObject(user1);
        heap.addObject(user2);
        heap.addObject(cache);
        heap.addObject(temp);

        System.out.println("üì¶ –°–æ–∑–¥–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã:");
        System.out.println("  " + user1);
        System.out.println("  " + user2);
        System.out.println("  " + cache);
        System.out.println("  " + temp);
        System.out.println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: " + heap.getCurrentSize() + "/" + heap.getMaxSize() + " –±–∞–π—Ç");

        // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
        user1.addReference(cache);
        user2.addReference(cache);
        cache.addReference(temp);

        System.out.println("\nüîó –°–æ–∑–¥–∞–Ω—ã —Å–≤—è–∑–∏:");
        System.out.println("  User_1 -> Cache");
        System.out.println("  User_2 -> Cache");
        System.out.println("  Cache -> Temp");

        // –î–µ–ª–∞–µ–º user1 –∏ user2 –∫–æ—Ä–Ω–µ–≤—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
        gc.addRoot(user1);
        gc.addRoot(user2);

        System.out.println("\nüå± –ö–æ—Ä–Ω–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã: User_1, User_2");

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞
        System.out.println("\nüßπ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞...");
        Collection<GCObject> collected = gc.collect();

        System.out.println("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        System.out.println("–°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: " + collected.size());
        System.out.println("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã: " + heap.getAllObjects().size());
        System.out.println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: " + heap.getCurrentSize() + "/" + heap.getMaxSize() + " –±–∞–π—Ç");

        System.out.println("\nüìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã:");
        for (GCObject obj : heap.getAllObjects()) {
            System.out.println("  " + obj);
        }
    }

    private static void demonstrateCopyingGC() {
        System.out.println("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø COPYING GC");
        System.out.println("===========================");

        // –°–æ–∑–¥–∞–µ–º –∫—É—á—É —Ä–∞–∑–º–µ—Ä–æ–º 800 –±–∞–π—Ç
        Heap heap = new Heap(800);
        CopyingGC gc = new CopyingGC(heap);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        GCObject session = new GCObject("Session", 120);
        GCObject user = new GCObject("User", 100);
        GCObject profile = new GCObject("Profile", 80);
        GCObject temp1 = new GCObject("Temp1", 60);
        GCObject temp2 = new GCObject("Temp2", 40);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∫—É—á—É
        heap.addObject(session);
        heap.addObject(user);
        heap.addObject(profile);
        heap.addObject(temp1);
        heap.addObject(temp2);

        System.out.println("üì¶ –°–æ–∑–¥–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã:");
        System.out.println("  " + session);
        System.out.println("  " + user);
        System.out.println("  " + profile);
        System.out.println("  " + temp1);
        System.out.println("  " + temp2);
        System.out.println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: " + heap.getCurrentSize() + "/" + heap.getMaxSize() + " –±–∞–π—Ç");

        // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
        session.addReference(user);
        user.addReference(profile);
        profile.addReference(temp1);

        System.out.println("\nüîó –°–æ–∑–¥–∞–Ω—ã —Å–≤—è–∑–∏:");
        System.out.println("  Session -> User");
        System.out.println("  User -> Profile");
        System.out.println("  Profile -> Temp1");
        System.out.println("  Temp2 - –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç");

        // –î–µ–ª–∞–µ–º session –∫–æ—Ä–Ω–µ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        gc.addRoot(session);

        System.out.println("\nüå± –ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: Session");

        // –ó–∞–ø—É—Å–∫–∞–µ–º Copying GC
        System.out.println("\nüîÑ –ó–∞–ø—É—Å–∫ Copying GC...");
        Collection<GCObject> collected = gc.collect();

        System.out.println("‚úÖ Copying GC –∑–∞–≤–µ—Ä—à–µ–Ω!");
        System.out.println("–°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: " + collected.size());
        System.out.println("–û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã: " + heap.getAllObjects().size());
        System.out.println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: " + heap.getCurrentSize() + "/" + heap.getMaxSize() + " –±–∞–π—Ç");

        System.out.println("\nüìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã:");
        for (GCObject obj : heap.getAllObjects()) {
            System.out.println("  " + obj);
        }
    }

    private static void demonstrateObjectGenerator() {
        System.out.println("üè≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¢–û–†–ê –û–ë–™–ï–ö–¢–û–í");
        System.out.println("====================================");

        // –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –∫—É—á–µ–π —Ä–∞–∑–º–µ—Ä–æ–º 2000 –±–∞–π—Ç
        ObjectGenerator generator = new ObjectGenerator(2000);
        
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥...");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread generatorThread = new Thread(generator::start);
        generatorThread.start();

        try {
            Thread.sleep(10000); // –†–∞–±–æ—Ç–∞–µ–º 10 —Å–µ–∫—É–Ω–¥
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        generator.stop();
        System.out.println("üõë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
}

// –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
class ObjectGenerator {
    private final Heap heap;
    private final GarbageCollector gc;
    private final Random random = new Random();
    private final AtomicInteger objectCounter = new AtomicInteger(0);
    private final List<GCObject> rootObjects = Collections.synchronizedList(new ArrayList<>());
    private volatile boolean isRunning = true;

    public ObjectGenerator(int heapSize) {
        this.heap = new Heap(heapSize);
        this.gc = new MarkAndSweepGC(heap);
    }

    public void start() {
        System.out.println("üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω (–∫—É—á–∞: " + heap.getMaxSize() + " –±–∞–π—Ç)");

        // –ü–æ—Ç–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        new Thread(this::objectCreator).start();
        // –ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GC
        new Thread(this::gcRunner).start();
    }

    public void stop() {
        isRunning = false;
        printStatistics();
    }

    private void objectCreator() {
        while (isRunning) {
            try {
                createRandomObject();
                Thread.sleep(1000); // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
    }

    private void gcRunner() {
        while (isRunning) {
            try {
                runGarbageCollection();
                Thread.sleep(2000); // GC –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
    }

    private void createRandomObject() {
        int id = objectCounter.incrementAndGet();
        String name = "Object_" + id;
        int size = random.nextInt(200) + 50; // –û–±—ä–µ–∫—Ç—ã –æ—Ç 50 –¥–æ 249 –±–∞–π—Ç

        GCObject obj = new GCObject(name, size);

        synchronized (heap) {
            if (heap.addObject(obj)) {
                // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 60% –¥–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ—Ä–Ω–µ–≤—ã–º
                if (random.nextDouble() < 0.6) {
                    rootObjects.add(obj);
                    gc.addRoot(obj);
                    System.out.println("üå± –ö–æ—Ä–µ–Ω—å: " + obj);
                } else {
                    System.out.println("üì¶ –û–±—ä–µ–∫—Ç: " + obj);
                }

                // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20% —É–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
                if (!rootObjects.isEmpty() && random.nextDouble() < 0.2) {
                    removeRandomRootObject();
                }
            } else {
                System.out.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å " + obj.getName() + " - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏");
            }
        }
    }

    private void removeRandomRootObject() {
        if (rootObjects.isEmpty()) return;

        synchronized (heap) {
            GCObject obj = rootObjects.remove(random.nextInt(rootObjects.size()));
            gc.removeRoot(obj);
            System.out.println("üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: " + obj.getName());
        }
    }

    private void runGarbageCollection() {
        synchronized (heap) {
            System.out.println("üßπ –ó–∞–ø—É—Å–∫ GC...");
            Collection<GCObject> collected = gc.collect();
            System.out.println("‚úÖ GC –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: " + collected.size());
        }
    }

    private void printStatistics() {
        System.out.println("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
        System.out.println("===============");
        System.out.println("–û–±—ä–µ–∫—Ç–æ–≤ –≤ –∫—É—á–µ: " + heap.getAllObjects().size());
        System.out.println("–ö–æ—Ä–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + rootObjects.size());
        System.out.println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: " + heap.getCurrentSize() + "/" + heap.getMaxSize() + " –±–∞–π—Ç");
        System.out.printf("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—É—á–∏: %.1f%%\n", heap.getUsagePercentage());

        System.out.println("\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã:");
        for (GCObject obj : heap.getAllObjects()) {
            System.out.println("  " + obj);
        }
    }
}
