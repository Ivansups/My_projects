import java.util.*;

public class GCTest {
    
    public static void main(String[] args) {
        System.out.println("üß™ –¢–ï–°–¢–´ –°–ë–û–†–©–ò–ö–ê –ú–£–°–û–†–ê (MARK & SWEEP)");
        System.out.println("=======================================\n");
        
        testMarkAndSweepBasic();
        testCircularReferences();
        testMemoryReclamation();
        testRootObjects();
        testMultipleRoots();
        
        System.out.println("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!");
    }
    
    public static void testMarkAndSweepBasic() {
        System.out.println("üîç –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å");
        
        Heap heap = new Heap(500);
        MarkAndSweepGC gc = new MarkAndSweepGC(heap);
        
        GCObject root = new GCObject("Root", 100);
        GCObject reachable = new GCObject("Reachable", 50);
        GCObject unreachable = new GCObject("Unreachable", 50);
        
        heap.addObject(root);
        heap.addObject(reachable);
        heap.addObject(unreachable);
        
        root.addReference(reachable);
        gc.addRoot(root);
        
        Collection<GCObject> collected = gc.collect();
        
        assertTest(heap.getAllObjects().size() == 2, "–î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 2 –æ–±—ä–µ–∫—Ç–∞");
        assertTest(collected.size() == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω 1 –æ–±—ä–µ–∫—Ç");
        assertTest(collected.contains(unreachable), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω unreachable –æ–±—ä–µ–∫—Ç");
        assertTest(heap.getAllObjects().contains(root), "Root –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è");
        assertTest(heap.getAllObjects().contains(reachable), "Reachable –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
    }
    
    public static void testMultipleRoots() {
        System.out.println("üå≥ –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏");
        
        Heap heap = new Heap(500);
        MarkAndSweepGC gc = new MarkAndSweepGC(heap);
        
        GCObject root1 = new GCObject("Root1", 80);
        GCObject root2 = new GCObject("Root2", 80);
        GCObject child1 = new GCObject("Child1", 60);
        GCObject child2 = new GCObject("Child2", 60);
        GCObject orphan = new GCObject("Orphan", 40);
        
        heap.addObject(root1);
        heap.addObject(root2);
        heap.addObject(child1);
        heap.addObject(child2);
        heap.addObject(orphan);
        
        root1.addReference(child1);
        root2.addReference(child2);
        
        gc.addRoot(root1);
        gc.addRoot(root2);
        
        Collection<GCObject> collected = gc.collect();
        
        assertTest(heap.getAllObjects().size() == 4, "–î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 4 –æ–±—ä–µ–∫—Ç–∞");
        assertTest(collected.size() == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω 1 –æ–±—ä–µ–∫—Ç");
        assertTest(collected.contains(orphan), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω orphan –æ–±—ä–µ–∫—Ç");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
    }
    
    public static void testCircularReferences() {
        System.out.println("üîÑ –¢–µ—Å—Ç 3: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏");
        
        Heap heap = new Heap(300);
        MarkAndSweepGC gc = new MarkAndSweepGC(heap);
        
        GCObject node1 = new GCObject("Node1", 50);
        GCObject node2 = new GCObject("Node2", 50);
        GCObject node3 = new GCObject("Node3", 50);
        
        heap.addObject(node1);
        heap.addObject(node2);
        heap.addObject(node3);
        
        node1.addReference(node2);
        node2.addReference(node3);
        node3.addReference(node1);
        
        gc.addRoot(node1);
        
        Collection<GCObject> collected = gc.collect();
        
        assertTest(heap.getAllObjects().size() == 3, "–í—Å–µ 3 –æ–±—ä–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è");
        assertTest(collected.size() == 0, "–ù–∏–∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω—ã");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
    }
    
    public static void testMemoryReclamation() {
        System.out.println("üíæ –¢–µ—Å—Ç 4: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏");
        
        Heap heap = new Heap(1000);
        MarkAndSweepGC gc = new MarkAndSweepGC(heap);
        
        GCObject root = new GCObject("Root", 100);
        heap.addObject(root);
        gc.addRoot(root);
        
        int initialSize = heap.getCurrentSize();
        
        for (int i = 0; i < 10; i++) {
            GCObject obj = new GCObject("Temp" + i, 50);
            heap.addObject(obj);
        }
        
        int sizeBeforeGC = heap.getCurrentSize();
        
        Collection<GCObject> collected = gc.collect();
        
        int sizeAfterGC = heap.getCurrentSize();
        int freedMemory = sizeBeforeGC - sizeAfterGC;
        
        assertTest(freedMemory > 0, "–ü–∞–º—è—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞");
        assertTest(collected.size() == 10, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω–æ 10 –æ–±—ä–µ–∫—Ç–æ–≤");
        assertTest(sizeAfterGC == initialSize, "–†–∞–∑–º–µ—Ä –∫—É—á–∏ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (" + 
                          freedMemory + " –±–∞–π—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ)\n");
    }
    
    public static void testRootObjects() {
        System.out.println("üå≥ –¢–µ—Å—Ç 5: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è–º–∏");
        
        Heap heap = new Heap(400);
        MarkAndSweepGC gc = new MarkAndSweepGC(heap);
        
        GCObject root1 = new GCObject("Root1", 80);
        GCObject root2 = new GCObject("Root2", 80);
        GCObject child1 = new GCObject("Child1", 60);
        GCObject child2 = new GCObject("Child2", 60);
        
        heap.addObject(root1);
        heap.addObject(root2);
        heap.addObject(child1);
        heap.addObject(child2);
        
        root1.addReference(child1);
        root2.addReference(child2);
        
        gc.addRoot(root1);
        gc.addRoot(root2);
        
        Collection<GCObject> collected = gc.collect();
        
        assertTest(heap.getAllObjects().size() == 4, "–í—Å–µ 4 –æ–±—ä–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è");
        assertTest(collected.size() == 0, "–ù–∏–∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω—ã");
        
        gc.removeRoot(root2);
        collected = gc.collect();
        
        assertTest(heap.getAllObjects().size() == 2, "–î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 2 –æ–±—ä–µ–∫—Ç–∞");
        assertTest(collected.size() == 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω–æ 2 –æ–±—ä–µ–∫—Ç–∞");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ö–æ—Ä–Ω–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n");
    }
    
    private static void assertTest(boolean condition, String message) {
        if (!condition) {
            throw new AssertionError("–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: " + message);
        }
    }
}
